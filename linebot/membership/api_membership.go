/**
 * Membership API
 * This document describes LINE Official Account Membership API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py

package membership

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/line/line-bot-sdk-go/v8/linebot"
)

type MembershipAPI struct {
	httpClient   *http.Client
	endpoint     *url.URL
	channelToken string
	ctx          context.Context
}

// MembershipAPIOption type
type MembershipAPIOption func(*MembershipAPI) error

// New returns a new bot client instance.
func NewMembershipAPI(channelToken string, options ...MembershipAPIOption) (*MembershipAPI, error) {
	if channelToken == "" {
		return nil, errors.New("missing channel access token")
	}

	c := &MembershipAPI{
		channelToken: channelToken,
		httpClient:   http.DefaultClient,
	}

	u, err := url.ParseRequestURI("https://api.line.me")
	if err != nil {
		return nil, err
	}
	c.endpoint = u

	for _, option := range options {
		err := option(c)
		if err != nil {
			return nil, err
		}
	}
	return c, nil
}

// WithContext method
func (call *MembershipAPI) WithContext(ctx context.Context) *MembershipAPI {
	call.ctx = ctx
	return call
}

func (client *MembershipAPI) Do(req *http.Request) (*http.Response, error) {
	if client.channelToken != "" {
		req.Header.Set("Authorization", "Bearer "+client.channelToken)
	}
	req.Header.Set("User-Agent", "LINE-BotSDK-Go/"+linebot.GetVersion())
	if client.ctx != nil {
		req = req.WithContext(client.ctx)
	}
	return client.httpClient.Do(req)
}

func (client *MembershipAPI) Url(endpointPath string) string {
	newPath := path.Join(client.endpoint.Path, endpointPath)
	u := *client.endpoint
	u.Path = newPath
	return u.String()
}

// WithHTTPClient function
func WithHTTPClient(c *http.Client) MembershipAPIOption {
	return func(client *MembershipAPI) error {
		client.httpClient = c
		return nil
	}
}

// WithEndpointClient function
func WithEndpoint(endpoint string) MembershipAPIOption {
	return func(client *MembershipAPI) error {
		u, err := url.ParseRequestURI(endpoint)
		if err != nil {
			return err
		}
		client.endpoint = u
		return nil
	}
}

// GetMembershipList
//
// Get a list of memberships.
// Parameters:

// https://developers.line.biz/en/reference/messaging-api/#get-membership-plans
func (client *MembershipAPI) GetMembershipList() (*MembershipListResponse, error) {
	_, body, error := client.GetMembershipListWithHttpInfo()
	return body, error
}

// GetMembershipList
// If you want to take advantage of the HTTPResponse object for status codes and headers, use this signature.
//
// Get a list of memberships.
// Parameters:

// https://developers.line.biz/en/reference/messaging-api/#get-membership-plans
func (client *MembershipAPI) GetMembershipListWithHttpInfo() (*http.Response, *MembershipListResponse, error) {
	path := "/membership/v1/list"

	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, nil, err
	}

	res, err := client.Do(req)

	if err != nil {
		return res, nil, err
	}

	if res.StatusCode/100 != 2 {
		bodyBytes, err := io.ReadAll(res.Body)
		bodyReader := bytes.NewReader(bodyBytes)
		if err != nil {
			return res, nil, fmt.Errorf("failed to read response body: %w", err)
		}
		res.Body = io.NopCloser(bodyReader)
		return res, nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(bodyBytes))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := MembershipListResponse{}
	if err := decoder.Decode(&result); err != nil {
		return res, nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return res, &result, nil

}

// GetMembershipSubscription
//
// Get a user's membership subscription.
// Parameters:
//        userId             User ID

// https://developers.line.biz/en/reference/messaging-api/#get-a-users-membership-subscription-status
func (client *MembershipAPI) GetMembershipSubscription(

	userId string,

) (*GetMembershipSubscriptionResponse, error) {
	_, body, error := client.GetMembershipSubscriptionWithHttpInfo(

		userId,
	)
	return body, error
}

// GetMembershipSubscription
// If you want to take advantage of the HTTPResponse object for status codes and headers, use this signature.
//
// Get a user's membership subscription.
// Parameters:
//        userId             User ID

// https://developers.line.biz/en/reference/messaging-api/#get-a-users-membership-subscription-status
func (client *MembershipAPI) GetMembershipSubscriptionWithHttpInfo(

	userId string,

) (*http.Response, *GetMembershipSubscriptionResponse, error) {
	path := "/membership/v1/subscription/{userId}"

	path = strings.Replace(path, "{userId}", userId, -1)

	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, nil, err
	}

	res, err := client.Do(req)

	if err != nil {
		return res, nil, err
	}

	if res.StatusCode/100 != 2 {
		bodyBytes, err := io.ReadAll(res.Body)
		bodyReader := bytes.NewReader(bodyBytes)
		if err != nil {
			return res, nil, fmt.Errorf("failed to read response body: %w", err)
		}
		res.Body = io.NopCloser(bodyReader)
		return res, nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(bodyBytes))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := GetMembershipSubscriptionResponse{}
	if err := decoder.Decode(&result); err != nil {
		return res, nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return res, &result, nil

}
